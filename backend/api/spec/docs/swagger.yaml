basePath: /api/v1
definitions:
  entity.Response:
    properties:
      data: {}
      message:
        type: string
      serverTime:
        type: string
      status:
        type: string
    type: object
  order.CartItem:
    properties:
      id:
        type: integer
    type: object
  order.CheckoutRequest:
    properties:
      accountName:
        type: string
      accountNumber:
        type: string
      items:
        items:
          $ref: '#/definitions/order.CartItem'
        type: array
      paymentMethod:
        type: string
    type: object
  order.PaymentRequest:
    properties:
      accountName:
        type: string
      accountNumber:
        type: string
      method:
        type: string
    type: object
  order.ShippingRequest:
    properties:
      address:
        type: string
      customerName:
        type: string
      shipperName:
        type: string
      shippingType:
        type: string
    type: object
  otp.SendOtpRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  otp.VerifyOtpRequest:
    properties:
      email:
        type: string
      otp:
        type: string
    required:
    - email
    - otp
    type: object
  product.AddCartItemRequest:
    properties:
      productId:
        type: integer
      quantity:
        type: integer
    type: object
  product.UpdateCartItemRequest:
    properties:
      quantity:
        type: integer
    type: object
  shipping.CreateShippingRequest:
    properties:
      address:
        type: string
      customerName:
        type: string
      orderId:
        type: integer
      senderName:
        type: string
      shipperName:
        type: string
      shippingType:
        type: string
    type: object
  shipping.UpdateShippingStatusRequest:
    properties:
      currentStatus:
        type: string
      newStatus:
        type: string
    type: object
  user.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  user.LogoutRequest:
    properties:
      loginId:
        type: string
    type: object
  user.RegisterRequest:
    properties:
      password:
        minLength: 8
        type: string
      username:
        minLength: 3
        type: string
    required:
    - password
    - username
    type: object
host: api.kore.co.id
info:
  contact:
    email: billyimmcul2010@gmail.com
    name: Billy Kore
    url: https://www.swagger.io/support
  description: Gateway service API specification.
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://swagger.io/terms/
  title: Gateway API
  version: "1.0"
paths:
  /carts:
    get:
      consumes:
      - application/json
      description: Get list of cart items
      parameters:
      - description: Number of cart to display
        in: query
        name: limit
        required: true
        type: integer
      - description: ID of cart for begin to display
        in: query
        name: startId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Response'
      summary: Cart item list
      tags:
      - product
    post:
      consumes:
      - application/json
      description: Add new item to cart
      parameters:
      - description: Add cart item request
        in: body
        name: AddCartItemRequest
        required: true
        schema:
          $ref: '#/definitions/product.AddCartItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Response'
      summary: Add cart item
      tags:
      - product
  /carts/{cartId}:
    put:
      consumes:
      - application/json
      description: Update existing cart item
      parameters:
      - description: Cart ID
        in: path
        name: cartId
        required: true
        type: integer
      - description: Update cart item request
        in: body
        name: UpdateCartItemRequest
        required: true
        schema:
          $ref: '#/definitions/product.UpdateCartItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Response'
      summary: Update cart item
      tags:
      - product
  /carts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a cart by ID
      parameters:
      - description: Cart ID
        in: path
        name: cartId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Response'
      summary: Delete specific cart
      tags:
      - product
  /categories:
    get:
      consumes:
      - application/json
      description: Get list of product categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Response'
      summary: List of product categories
      tags:
      - product
  /discounts:
    get:
      consumes:
      - application/json
      description: Get list of discounts
      parameters:
      - description: Number of discounts to display
        in: query
        name: limit
        required: true
        type: integer
      - description: ID of discount for begin to display
        in: query
        name: startId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Response'
      summary: List of discounts
      tags:
      - product
  /login:
    post:
      consumes:
      - application/json
      description: User login by username and password
      parameters:
      - description: Authorization header contains Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Login Request
        in: body
        name: LoginRequest
        required: true
        schema:
          $ref: '#/definitions/user.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Response'
      summary: User login
      tags:
      - user
  /logout:
    post:
      consumes:
      - application/json
      description: User logout by access token
      parameters:
      - description: Logout Request
        in: body
        name: LogoutRequest
        required: true
        schema:
          $ref: '#/definitions/user.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Response'
      summary: User logout
      tags:
      - user
  /orders/{orderId}:
    delete:
      consumes:
      - application/json
      description: Cancel customer order by ID
      parameters:
      - description: Order ID
        in: path
        name: orderId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Response'
      summary: Cancel specific order
      tags:
      - order-service
    get:
      consumes:
      - application/json
      description: Get order by ID
      parameters:
      - description: Order ID
        in: path
        name: orderId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Response'
      summary: Get specific order
      tags:
      - order
  /orders/{orderId}/pay:
    post:
      consumes:
      - application/json
      description: Pay customer order
      parameters:
      - description: Order ID
        in: path
        name: orderId
        required: true
        type: integer
      - description: Pay order request
        in: body
        name: OrderPaymentRequest
        required: true
        schema:
          $ref: '#/definitions/order.PaymentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Response'
      summary: Pay order
      tags:
      - order-service
  /orders/{orderId}/ship:
    post:
      consumes:
      - application/json
      description: Ship customer order
      parameters:
      - description: Order ID
        in: path
        name: orderId
        required: true
        type: integer
      - description: Ship order request
        in: body
        name: ShippingRequest
        required: true
        schema:
          $ref: '#/definitions/order.ShippingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Response'
      summary: Ship order
      tags:
      - order-service
  /orders/checkout:
    post:
      consumes:
      - application/json
      description: Checkout customer cart items
      parameters:
      - description: Checkout request
        in: body
        name: CheckoutRequest
        required: true
        schema:
          $ref: '#/definitions/order.CheckoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Response'
      summary: Checkout items
      tags:
      - order
  /otp/send:
    post:
      consumes:
      - application/json
      description: Send OTP to customer email
      parameters:
      - description: Send OTP request
        in: body
        name: SendOtpRequest
        required: true
        schema:
          $ref: '#/definitions/otp.SendOtpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Response'
      summary: Send OTP
      tags:
      - otp
  /otp/verify:
    post:
      consumes:
      - application/json
      description: Verify customer OTP
      parameters:
      - description: Verify OTP request
        in: body
        name: VerifyOtpRequest
        required: true
        schema:
          $ref: '#/definitions/otp.VerifyOtpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Response'
      summary: Verify OTP
      tags:
      - otp
  /products:
    get:
      consumes:
      - application/json
      description: Get list of products
      parameters:
      - description: Number of products to display
        in: query
        name: limit
        required: true
        type: integer
      - description: ID of products for begin to display
        in: query
        name: startId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Response'
      summary: List of products
      tags:
      - product
  /products/{productId}:
    get:
      consumes:
      - application/json
      description: Get product by ID
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Response'
      summary: Get specific product
      tags:
      - product
  /register:
    post:
      consumes:
      - application/json
      description: User registration by username and password
      parameters:
      - description: Register Request
        in: body
        name: RegisterRequest
        required: true
        schema:
          $ref: '#/definitions/user.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Response'
      summary: User registration
      tags:
      - user
  /shipping:
    post:
      consumes:
      - application/json
      description: Ship new customer order shipping
      parameters:
      - description: Ship shipping request
        in: body
        name: CreateShippingRequest
        required: true
        schema:
          $ref: '#/definitions/shipping.CreateShippingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Response'
      summary: Ship shipping
      tags:
      - shipping
  /shipping/{shippingId}/status:
    put:
      consumes:
      - application/json
      description: Update customer order shipping status by ID
      parameters:
      - description: Shipping ID
        in: path
        name: shippingId
        required: true
        type: integer
      - description: Update shipping request
        in: body
        name: UpdateShippingStatusRequest
        required: true
        schema:
          $ref: '#/definitions/shipping.UpdateShippingStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.Response'
      summary: Update shipping
      tags:
      - shipping
schemes:
- http
- https
swagger: "2.0"
